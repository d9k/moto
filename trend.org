#+HTML_HEAD: -*- fill-column: 92 -*-

#+TITLE: Модуль Trend и тесты

#+NAME:css
#+BEGIN_HTML
<link rel="stylesheet" type="text/css" href="css/css.css" />
#+END_HTML

* Бизнес-процесс и цели

  Мы делаем сайт-аггрегатор всех квартир-новостроек в С-Пб.

  Есть застройщики, они строят и продают квартиры. Но для того чтобы реализовать объем квартир они
  не только используют свой отдел продаж, но и привлекают агенства реализации квартир за комиссию
  (агентское вознаграждение)

  Многие застройщики работают с 3-5 крупных агенств, которые в свою очередь привлекают других
  субагентов за комиссию.

  Цель сайта для нашей компании - инициировать обращение посетителя в компанию.

  Цель пользователя - найти квартиру под его возможности и потребности. На сайте пользователю
  предоставляется не вся информация по квартире, чтобы он имел стимул обратиться в нашу компанию,
  где его обработает менеджер по продажам.

  Посетитель на сайте выполняет поиск квартиры (основной пользовательский сценарий). Посетитель
  может выполнить расчет ипотеки, продать свою квартиру, заказать просмотр квартир итп
  (дополнительные сценарии).

  Цель сайта для менеджера - найти квартиру под любые параметры клиента и обеспечить ответ на
  любые вопросы клиента по застройщику и квартире.

  Причины обращений частных клиентов:
  - большой выбор и возможность получить ответы на все вопросы
  - ипотечный центр (берет на себя сложности с ипотекой)
  - показ квартир, который осуществляет компания:
    - индивидуальный показ (на автомобиле)
    - автобусные туры (срез по району) в выходные
  - реализация квартир клиентов (чтобы купить квартиру, клиенту иногда надо
    продать квартиру)
  - Люди не покупают квартиры с сайта. Им психологически сложно расстаться с такой большой суммой
    денег, поэтому они ищут иллюзии понимания этого рынка, которую предоставляет им менеджер
    компании.
  - Вторичку вообще продают через знакомых агентов. Поэтому практически единственное бизнес-value
    агенств вторички - широта связей их менеджеров. Все продается только через знакомых.


  Взаимодействие с застройщиками:
  - Застройщики регулярно отправляют информацию о объектах (или мы ее самостоятельно забираем). У
    поставщиков информация представлена в очень разных форматах. Мы конкурируем с отделом продаж
    застройщиков, поэтому они не заинтересованы предоставлять нам данные в нашем формате.
  - Небольшая часть застройщиков предоставляет данные через т.н. "агентский портал", куда
    менеджер компании может попасть по логину и паролю.
  - У ряда застройщиков есть достаточно актуальное наличие планировок на сайте.
  - Мы сопровождаем договора клиентов с застройщиком.

  Взаимодействие с агентствами:
  - Мы выступаем для суб-агентов в роли застройщика, отправляя им данные о квартирах.
  - Отдел диллерских продаж принимает обращения от агенств, бронируют квартиры.


  Стратегия: Сумма проданных компанией квартир = кол-во обращений клиентов компании * конверсия
  отдела продаж * кол-во менеджеров.

  Новый сайт необходим чтобы увеличить конверсию клик-обращение, и конверсию отдела продаж.

  Компания также хочет чтобы сайт был для пользователя более ценным чем сайты застройщиков, для
  этого планируются дополнительные сервисы - ипотечный калькулятор, расчет инвестиционной
  привлекательности, итп.

  Компания считает что сможет также сократить время обучения используя новый сайт.

  Какая-то часть обработки информации будет производиться контент-менеджерами вручную. Необходимо
  заложить возможности для них. Например: У застройщика есть базовая цена квартиры и регламент -
  как рассчитывать стоимость квартир, иногда очень сложный. Менеджер по развитию проектов должен
  иметь возможность создавать набор правил применяющихся в определенном порядке.

  Менеджер по продаже должен иметь возможность на странице квартиры накидать скидок (иногородний
  покупатель, итп), влиящих на цену квартиры. Это очень важное бизнес-требование.

  С точки зрения бизнес-процесса, продуктом компании яаляется специалист по недвижимости. Его
  время покупает клиент. Поэтому компания заинтересована:
  - Занять нишу ресурса, который позволяет выбрать квартиру в новостройке С-Пб.
  - Сэкономить на обучении специалистов.
  Основные проблемы на этом пути:
  - Товарная линейка ограничена
  - Актуальность данных
  - Юзабилити

* Определения сущностей
** Квартира (flat)

   #+CAPTION: Данные квартиры
   #+NAME: flat_data
     | field name   | field type           | note                                   |
     |--------------+----------------------+----------------------------------------|
     | id           | serial               | идентификатор                          |
     | plex-id      | (or db-null integer) | идентификатор очереди жилого комплекса |
     | rooms        | (or db-null integer) | кол-во комнат                          |
     | area-sum     | (or db-null integer) | общая площадь квартиры                 |
     | area-living  | (or db-null integer) | жилая площадь квартиры                 |
     | area-kitchen | (or db-null integer) | площадь кухни                          |
     | price        | (or db-null integer) | цена                                   |
     | subsidy      | (or db-null boolean) | субсидия                               |
     | finishing    | (or db-null boolean) | отделка                                |
     | ipoteka      | (or db-null boolean) | ипотека                                |
     | installment  | (or db-null boolean) | рассрочка                              |
     | balcon       | (or db-null varchar) | балкон/лоджия                          |
     | sanuzel      | (or db-null boolean) | Санузел раздельный/совмещенный         |

   #+NAME: flat_entity
   #+BEGIN_SRC lisp
     ;; Сущность роли
     (define-entity flat "Сущность роли"
       <<flat_fields()>>)

     (make-flat-table)

     <<create_flats>>
   #+END_SRC

   Где =flat-fields= (поля данных) определим как:

   #+NAME: flat_fields
   #+BEGIN_SRC emacs-lisp :var table=flat_data :results output :exports results :tangle no
     (gen-fields table)
   #+END_SRC

   #+NAME: create_flats
   #+BEGIN_SRC lisp
     (make-flat :rooms 1 :price 2589000)
   #+END_SRC

** Жилой комплекс (cmpx)

   Эта сущность нужна только чтобы объединять очереди жилого комплекса

   #+CAPTION: Данные жилого комплекса
   #+NAME: plex_data
     | field name  | field type | note                           |
     |-------------+------------+--------------------------------|
     | id          | serial     | идентификатор                  |
     | name        | varchar    | название                       |
     | addr        | varchar    | адрес                          |

** Очередь жилого комплекса (plex)

   #+CAPTION: Данные очереди жилого комплекса
   #+NAME: plex_data
     | field name  | field type | note                           |
     |-------------+------------+--------------------------------|
     | id          | serial     | идентификатор                  |
     | cmpx-id     | integer    | идентификатор жилого комплекса |
     | name        | varchar    | название                       |
     | addr        | varchar    | адрес                          |
     | deadline    | varchar    | срок сдачи                     |
     | district-id | integer    | идентификатор района           |
     | metro-id    | integer    | идентификатор метро            |
     | distance    | varchar    | расстояние до метро            |

** Картинки очередей ЖК
** Картинки планировок
** Картинки хода строительства
** Город (city)

   Город в котором находится объект

   #+CAPTION: Данные города
   #+NAME: district_data
     | field name | field type | note            |
     |------------+------------+-----------------|
     | id         | serial     | идентификатор   |
     | name       | varchar    | название города |

** Район (district)

   Район города, в котором находится объект

   #+CAPTION: Данные роли
   #+NAME: district_data
     | field name  | field type | note                                     |
     |-------------+------------+------------------------------------------|
     | id          | serial     | идентификатор                            |
     | name        | varchar    | название района |

** Метро (metro)

   Метро неподалеку от объекта

   #+CAPTION: Данные роли
   #+NAME: metro_data
     | field name | field type | note             |
     |------------+------------+------------------|
     | id         | serial     | идентификатор    |
     | name       | varchar    | название станции |

* Точки входа

  Соберем шаблоны:

  #+NAME: trend_tpl
  #+BEGIN_SRC closure-template-html :tangle src/mod/trend/trend-tpl.htm :noweb tangle :exports code
    // -*- mode: closure-template-html; fill-column: 140 -*-
    {namespace trendtpl}

    <<trendtpl_contents>>
  #+END_SRC

  Скомпилируем шаблоны при подготовке модуля

  #+NAME: trend_prepare
  #+BEGIN_SRC lisp :tangle src/mod/trend/trend-prepare.lisp :noweb tangle :exports code
    (in-package #:moto)

    ;; Скомпилируем шаблон
    (closure-template:compile-template
     :common-lisp-backend
     (pathname
      (concatenate 'string *base-path* "mod/trend/trend-tpl.htm")))
  #+END_SRC

  Соберем контроллеры и все функции, которые контроллеры вызывают

  #+NAME: trend_fn
  #+BEGIN_SRC lisp :tangle src/mod/trend/trend.lisp :noweb tangle :exports code
    (in-package #:moto)

    <<flat_entity>>

    <<trend_fn_contents>>

    <<trend_test>>
  #+END_SRC

* Interface
** Страничка квартиры

   [[file:pics/Trend_apartment02.png][Дизайн-макет: Карточка квартиры]]

   [[file:pics/Trend_apartment_print.png][Дизайн-макет: Карточка квартиры - версия для печати]]

   Соберем шаблоны страницы квартиры

   #+NAME: trendtpl_contents
   #+BEGIN_SRC closure-template-html
     {template flatpage}
         <<flatpage_tpl_contents>>
     {/template}
   #+END_SRC

  Соберем определения страниц

  #+NAME: trend_fn_contents
  #+BEGIN_SRC lisp
    (in-package #:moto)

    (restas:define-route flat ("/flat/:flatid")
      (with-wrapper
        (let ((flat (get-flat 1)))
          (trendtpl:flatpage
           (list
            <<flatpage_contents>>
            )))))
  #+END_SRC

*** TODO Pop-up
    Есть вариант открывать карточку квартиры в pop-up окне. Но на каждую квартиру должна
    быть прямая ссылка - очевидно надо менять адресную строку.

*** TODO Версия для печати
    Также должна быть версия для печати, чтобы распечатать интересующий вариант.

*** TODO Менеджер хочет накидать скидок
    Менеджер по продаже должен иметь возможность на странице квартиры накидать скидок (иногородний
    покупатель, итп), влиящих на цену квартиры. Это очень важное бизнес-требование.
*** TODO Pdf-версия
*** TODO Отправить на почту
*** TODO Рассказать в социальных сетях
*** Тип квартиры

    #+NAME: flatpage_tpl_contents
    #+BEGIN_SRC closure-template-html
      {$rooms | noAutoescape}
      <br />
    #+END_SRC

    Тип квартиры показывается исходя из кол-ва комнат:

    #+NAME: flatpage_contents
    #+BEGIN_SRC lisp
      :rooms (let ((r (rooms flat)))
               (cond ((equal 0 r) "Квартира-студия")
                     ((equal 1 r) "1-комнатная квартира")
                     ((equal 2 r) "2-комнатная квартира")
                     ((equal 3 r) "3-комнатная квартира")
                     ((equal 4 r) "4-комнатная квартира")
                     (t (err "unknown rooms value"))))
    #+END_SRC

*** Идентификатор квартиры

    #+NAME: flatpage_tpl_contents
    #+BEGIN_SRC closure-template-html
      id: {$id | noAutoescape}
      <br />
    #+END_SRC

    Идентификатор квартиры показывается для быстрого доступа

    #+NAME: flatpage_contents
    #+BEGIN_SRC lisp
      :id (id flat)
    #+END_SRC

*** Цена при 100% оплате

    #+NAME: flatpage_tpl_contents
    #+BEGIN_SRC closure-template-html
      Цена квартиры при 100% оплате: {$price | noAutoescape}
      <br />
    #+END_SRC

    #+NAME: flatpage_contents
    #+BEGIN_SRC lisp
      :price (price flat)
    #+END_SRC

*** Кнопка "подробности у менедждера"

    ссылка на контакты

    #+NAME: flatpage_tpl_contents
    #+BEGIN_SRC closure-template-html
      <a href="/contacts">Подробности у менеджера</a>
      <br />
    #+END_SRC
*** TODO Карточка комплекса

    Справа карточка комплекса идентичная поисковой выдачи - она оттуда
    и берется.

    - Планировка квартиры - рисунок
    - План этажа
    - Карта на который мы отмечаем где в корпусе расположена
      квартира - чтобы сориентироваться по виду.
    - Карта с минимальной ценой

*** TODO Характеристики квартиры

    Нужно иметь возможность добавлять сюда параметры, но в первом прототипе мы это пока не
    делаем

    #+NAME: flatpage_tpl_contents
    #+BEGIN_SRC closure-template-html
      <br />
      <div style="border: 1px solid blue;">
          Кол_во комнат: {$rooms | noAutoescape}
          <br />
          Жилая площадь: {$area_living | noAutoescape}
          <br />
          Общая площадь: {$area_sum | noAutoescape}
          <br />
          Пллощадь кухни: {$area_kitchen | noAutoescape}
          <br />
          Санузел: {$sanuzel | noAutoescape}
          <br />
          Отделка: {$finishing | noAutoescape}
          <br />
          Балкон: {$balcon | noAutoescape}
          <br />
      </div>
      <br />
    #+END_SRC

    #+NAME: flatpage_contents
    #+BEGIN_SRC lisp
      :rooms (rooms flat)
      :area_living (area-living flat)
      :area_sum (area-sum flat)
      :area_kitchen (area-kitchen flat)
      :sanuzel (sanuzel flat)
      :finishing (finishing flat)
      :balcon (balcon flat)
    #+END_SRC

*** TODO Добавить в сравнение
*** TODO Добавить в избранное
*** TODO Четыре ключевых преимущетва из ЖК
*** TODO калькулятор ипотеки и рассрочки - отдельный кейс
*** TODO Возможность баннеров (автобусные туры)
*** TODO Инфо о жилом комплексе (потому что попадает в распечатку)
*** TODO Сссылка "подробно о комплексе" - к ЖК
*** TODO Квартиры в этом комплексе - ведут в карточку комплекса с открытыми двухкомнатными квартирами.
*** TODO Сообщить об ошибке.
*** TODO Когда было последнее обновление информации о квартире.
    Обновлено и дату. Чтобы менеджер видел актуальность. Показывать ли клиентам?

* Тесты

  Теперь у нас есть весь необходимый функционал, для работы авторизации. Мы можем его
  протестировать, для этого сформируем тест:

  #+NAME: trend_test
  #+BEGIN_SRC lisp

    ;; Тестируем trend
    (defun trend-test ()
      <<trend_test_contents>>
      (dbg "passed: trend-test~%"))
    (trend-test)
  #+END_SRC

  #+NAME: trend_test_contents
  #+BEGIN_SRC lisp

    ;; ;; Зарегистрируем четырех пользователей
    ;; (let ((alice (create-user "alice" "aXJAVtBT" "alice@mail.com"))
    ;;       (bob   (create-user "bob"   "pDa84LAh" "bob@mail.com"))
    ;;       (carol (create-user "carol" "zDgjGus7" "carol@mail.com"))
    ;;       (dave  (create-user "dave"  "6zt5GmvE" "dave@mail.com")))
    ;;   ;; Пусть Алиса пошлет Бобу сообщение
    ;;   (let* ((test-trend "Привет, Боб, это Алиса!")
    ;;          (trend-id (create-trend alice bob test-trend)))
    ;;     ;; Проверим, что сообщение существует
    ;;     (assert (get-trend trend-id))
    ;;     ;; Проверим, что оно находится в статусе "недоставлено"
    ;;     (assert (equal ":UNDELIVERED" (state (get-trend trend-id))))
    ;;     ;; Пусть второй пользователь запросит кол-во непрочитанных сообщений
    ;;     (let ((undelivered-trend-cnt (get-undelivered-trend-cnt bob)))
    ;;       ;; Проверим, что там одно непрочитанное сообщение
    ;;       (assert (equal 1 undelivered-trend-cnt))
    ;;       ;; Пусть второй пользователь запросит идентификаторы всех своих непрочитанных сообщений
    ;;       (let ((undelivered-trend-ids (get-undelivered-trend-ids alice bob)))
    ;;         ;; Проверим, что в списке идентификторов непрочитанных сообщений один элемент
    ;;         (assert (equal 1 (length undelivered-trend-ids)))
    ;;         ;; Получим это сообщение
    ;;         (let* ((read-trend-id (car undelivered-trend-ids))
    ;;                (read-trend (delivery-trend read-trend-id)))
    ;;           ;; Проверим, что это именно то сообщение, которое послал первый пользователь
    ;;           (assert (equal test-trend (trend read-trend)))
    ;;           ;; Проверим, что сообщение теперь доставлено
    ;;           (assert (equal ":DELIVERED" (state (get-trend read-trend-id))))))))
    ;;   ;; Пусть Боб ответит Алисе и напишет Кэрол
    ;;   (sleep 1)
    ;;   (let* ((reply-bob-to-alice "Здравствуй, Алиса, я получил твое письмо. Я напишу Кэрол что ты нашла меня")
    ;;          (reply-bob-to-alice-id (create-trend bob alice reply-bob-to-alice)))
    ;;     (sleep 1)
    ;;     (let* ((trend-bob-to-carol "Кэрол, передаю привет от Алисы. Боб.")
    ;;            (trend-bob-to-carol-id (create-trend bob carol trend-bob-to-carol)))
    ;;       (sleep 1)
    ;;       ;; Пусть Дэйв напишет Бобу
    ;;       (let* ((trend-dave-to-bob "Привет, Боб, я хочу добавить тебя в друзья")
    ;;              (trend-dave-to-bob-id (create-trend dave bob trend-dave-to-bob)))
    ;;         ;; Получим последние диалоги Боба
    ;;         (let ((last-dialogs (get-last-trend-dialog-ids-for-user-id bob)))
    ;;           ;; (dbg "~%~A" (bprint last-dialogs))
    ;;           ;; Проверим, что в имеем три диалога
    ;;           (assert (equal 3 (length last-dialogs)))
    ;;           ;; Проверим, что сообщения правильно упорядочены
    ;;           (assert (equal (list trend-dave-to-bob-id
    ;;                                trend-bob-to-carol-id
    ;;                                reply-bob-to-alice-id)
    ;;                          (mapcar #'car last-dialogs)))))))
    ;;   (logout-user dave)
    ;;   (logout-user carol)
    ;;   (logout-user bob)
    ;;   (logout-user alice))
  #+END_SRC
