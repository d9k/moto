
(defun gen-fields (table)
  (let ((rows (nthcdr 2 table)))
    (princ (format "(%s\n" (butlast (first rows))))
    (mapcar #'(lambda (x)
                (princ (format " %s\n" (butlast x))))
            (butlast (cdr rows)))
    (princ (format " %s)" (butlast (first (last rows)))))))

(defun gen-states (table)
  (let ((rows (nthcdr 2 table))
        (hash (make-hash-table :test #'equal))
        (states))
    (dolist (elt rows nil)
      (puthash (second elt) nil hash)
      (puthash (third elt)  nil hash))
    (maphash (lambda (k v)
               (push k states))
             hash)
    (princ "(")
    (dolist (elt (butlast states))
      (princ (format ":%s " elt)))
    (princ (format ":%s)" (car (last states))))))

(defun gen-actions (table)
  (let ((rows (nthcdr 2 table)))
    (let ((x (car rows)))
      (princ (format "((:%s :%s :%s)" (second x) (third x) (first x))))
    (if (equal 1 (length rows))
        (princ ")\n")
        (progn
          (princ "\n")
          (mapcar #'(lambda (x)
                      (princ (format " (:%s :%s :%s)\n" (second x) (third x) (first x))))
                  (cdr (butlast rows)))
          (let ((x (car (last rows))))
            (princ (format " (:%s :%s :%s))" (second x) (third x) (first x))))))))
