#+HTML_HEAD: -*- fill-column: 92 -*-

#+TITLE: Модуль сообщений их тесты

#+NAME:css
#+BEGIN_HTML
<link rel="stylesheet" type="text/css" href="css/css.css" />
#+END_HTML

* Введение

  Как залогиненный пользователь я хочу иметь возможность послать сообщение другому
  зарегистрированному на сайте пользователю.

  Как залогиненный пользователь я хочу иметь возможность читать свои отправленные другим
  пользователям сообщения. Также я хочу знать, доставлены они или нет (т.е. были ли
  прочитаны адресатом).

  Как залогиненный пользователь я хочу иметь возможность читать пришедшие мне от других
  пользователей сообщения.

  Как зарегистрированный пользователь я хочу получать email-уведомления о новых сообщениях
  и отключить эту функцию при необходимости.

  Как администратор сайта я хочу запрещать пользователю писать сообщения некоторым или всем
  зарегистрированным пользователям

  Иногда еще хочется получать уведомления о доставке сообщения

  Как модератор кармы я хочу регулировать кол-во отосланных пользователем сообщений в
  зависимости от его кармы, чтобы избежать рассылок спама.

  Что нам для этого нужно?
  - Сущность =User=, имеющая поле =id=
  - Сущность =Msg=, имеющая поля =snd_id=, =rcv_id=, =msg=
  - Движок создания форм, функции которого определены не здесь

  Как это работает?

  =При отправке сообщения= пользователь вводит адресата сообщения и текст сообщения, которые
  передаются контроллеру отправки сообщения. Контроллер отправки извлекает эти данные
  (=get-msg-data=), проверяет возможность отсылки сообщения (=check-msg-data=) и, в случае
  успеха, вызывает событие =crete-msg=, которое создает сообщение. В случае неудачи
  возбуждает ошибку, которую перехватит интерфейс сообщений.

  Залогиненный пользователь в любой момент может запросить:
  - кол-во непрочитанных сообщений (=get-undelivered-msg-cnt=)
  - все идентификторы непрочитанных сообщения (=get-undelivered-msg-idss=)
  - все идентификаторы прочитанных сообщений (=get-read
  - всю переписку с каким-либо адресатом (=get-msgs=)

* Шаблоны

  Соберем шаблоны сообщения

  #+NAME: msg_tpl
  #+BEGIN_SRC closure-template-html :tangle src/mod/msg/msg-tpl.htm :noweb tangle :exports code
    // -*- mode: closure-template-html; fill-column: 140 -*-
    {namespace msgtpl}

    {template sometpl}
      <<some_tpl>>
    {/template}
  #+END_SRC

* Функционал

  Соберем контроллеры и все функции, которые контроллеры вызывают

  #+NAME: msg_fn
  #+BEGIN_SRC lisp :tangle src/mod/msg/msg.lisp :noweb tangle :exports code
    (in-package #:moto)

    ;; Скомпилируем шаблон
    (closure-template:compile-template
     :common-lisp-backend
     (pathname
      (concatenate 'string *base-path* "mod/msg/msg-tpl.htm")))

    <<msg_fn_contents>>

    <<msg_test>>
  #+END_SRC

  Мы вводим:

** Шаблон

   #+NAME: some_tpl
   #+BEGIN_SRC html :exports code
     this is some tpl
   #+END_SRC

** Страница сообщений ее контроллер

   Страница регистрации использует движок форм для показа формы пользователю и при
   выполнении регистрации вызывает событие =create-user=.

   #+NAME: msg_fn_contents
   #+BEGIN_SRC lisp

     ;; Страница сообщений
     ;; (restas:define-route msgs ("/user/:id/msgs")
     ;;   (with-wrapper
     ;;     (concatenate
     ;;      'string
     ;;      "<h1>Страница сообщений</h1>"
     ;;      (if *current-user*
     ;;          "Регистрация невозможна - пользователь залогинен. <a href=\"/logout\">Logout</a>"
     ;;          (frm (tbl
     ;;                (list
     ;;                 (row "Имя пользователя" (fld "name"))
     ;;                 (row "Пароль" (fld "password"))
     ;;                 (row "Email" (fld "email"))
     ;;                 (row "" (submit "Зарегистрироваться")))))))))

     ;; ;; Контроллер страницы регистрации
     ;; (restas:define-route msgs-ctrl ("/user/:id/msgs" :method :post)
     ;;   (with-wrapper
     ;;     (let* ((p (alist-to-plist (hunchentoot:post-parameters*))))
     ;;       (setf (hunchentoot:session-value 'current-user)
     ;;             (create-user (getf p :name)
     ;;                          (getf p :password)
     ;;                          (getf p :email))))))
   #+END_SRC

** Событие отправки сообщения

   #+NAME: msg_fn_contents
   #+BEGIN_SRC lisp

     ;; Событие отправки сообщения
     (defun create-msg (snd-id rcv-id msg)
       (let ((msg-id (id (make-msg :snd-id snd-id :rcv-id rcv-id :msg msg))))
         (dbg "Создано сообщение: ~A" msg-id)
         ;; Делаем его недоставленным
         (upd-msg (get-msg msg-id) (list :state ":UNDELIVERED"))
         ;; Возвращаем msg-id
         msg-id))
   #+END_SRC

** Функция получения кол-ва непрочитанных сообщений

   #+NAME: msg_fn_contents
   #+BEGIN_SRC lisp

     ;; Функция получения кол-ва непрочитанных сообщений
     (defun get-undelivered-msg-cnt (snd-id rcv-id)
       (length (find-msg :snd-id snd-id :rcv-id rcv-id :state ":UNDELIVERED")))
   #+END_SRC

** Функция получения идентификторов непрочитанных сообщений

   #+NAME: msg_fn_contents
   #+BEGIN_SRC lisp

     ;; Функция получения идентификторов непрочитанных сообщений
     (defun get-undelivered-msg-ids (snd-id rcv-id)
       (mapcar #'id (find-msg :snd-id snd-id :rcv-id rcv-id :state ":UNDELIVERED")))
   #+END_SRC

** Событие доставки сообщения

   #+NAME: msg_fn_contents
   #+BEGIN_SRC lisp

     ;; Функция получения идентификторов непрочитанных сообщений
     (defun delivery-msg (msg-id)
       (get-msg msg-id))
   #+END_SRC

* Тесты

  Теперь у нас есть весь необходимый функционал, для работы авторизации. Мы можем его
  протестировать, для этого сформируем тест:

  #+NAME: msg_test
  #+BEGIN_SRC lisp

    ;; Тестируем сообщения
    (defun msg-test ()
      <<msg_test_contents>>
      (dbg "passed: msg-test~%"))
    (msg-test)
  #+END_SRC

  #+NAME: msg_test_contents
  #+BEGIN_SRC lisp

    ;; Зарегистрируем двух пользователей
    (let ((user-id-1 (create-user "name-1" "password-1" "email-1"))
          (user-id-2 (create-user "name-2" "password-2" "email-2")))
      ;; Пусть первый пользователь пошлет второму сообщение
      (let ((msg-id (create-msg user-id-1 user-id-2 "message-1")))
        ;; Проверим, что сообщение существует
        (assert (get-msg msg-id))
        ;; Проверим, что оно находится в статусе "недоставлено"
        (assert (equal ":UNDELIVERED" (state (get-msg msg-id))))
        ;; Пусть второй пользователь запросит кол-во непрочитанных сообщений
        (let ((undelivered-msg-cnt (get-undelivered-msg-cnt user-id-1 user-id-2)))
          ;; Проверим, что там одно непрочитанное сообщение
          (assert (equal 1 undelivered-msg-cnt))
          ;; Пусть второй пользователь запросит идентификаторы всех своих непрочитанных сообщений
          (let ((undelivered-msg-ids (get-undelivered-msg-ids user-id-1 user-id-2)))
            ;; Проверим, что в списке идентификторов непрочитанных сообщений один элемент
            (assert (equal 1 (length undelivered-msg-ids)))
            ;; Получим это сообщение
            (let* ((read-msg-id (car undelivered-msg-ids))
                   (read-msg (delivery-msg read-msg-id)))
              ;; Проверим, что это именно то сообщение, которое послал первый пользователь
              (assert (equal "message-1" (msg read-msg))))))))
  #+END_SRC
